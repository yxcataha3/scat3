"use strict";
// @ts-nocheck
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const grammy_1 = require("grammy");
const keyboards_1 = require("./assets/keyboards");
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const https = __importStar(require("https"));
const config = __importStar(require("../config"));
const logic_1 = require("./logic");
const config_1 = require("../config");
const IDS_SEPARATOR = '\n';
const bot = new grammy_1.Bot(config.TOKEN);
let users = new Set();
let cardIndex = 0;
const banFilePath = path.resolve('/root/banIds.txt');
//@ts-ignore
bot.on('callback_query', (ctx, next) => {
    console.log(ctx.callbackQuery.data);
    next();
});
bot.use((ctx, next) => {
    // @ts-ignore
    users.add(ctx.from.id);
    global[ctx.from.id] = global[ctx.from.id] || {};
    next();
});
bot.use((ctx, next) => __awaiter(void 0, void 0, void 0, function* () {
    if (config_1.ADMIN_IDS.includes(ctx.from.id)) {
        return next();
    }
    // @ts-ignore
    const BLACK_LIST_IDS = (yield fs.readFile(banFilePath, { encoding: 'utf8' }).catch(() => '')).split(IDS_SEPARATOR);
    if (BLACK_LIST_IDS.includes(ctx.from.id.toString())) {
        console.log(`–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è id: ${ctx.from.id} —Ç.–∫. –æ–Ω –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ`);
        return;
    }
    next();
}));
bot.on('message', (ctx, next) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    if (((_a = global[ctx.from.id]) === null || _a === void 0 ? void 0 : _a.lock_position) === 'get-spam') {
        (_b = global[ctx.from.id]) === null || _b === void 0 ? void 0 : _b.lock_position = '';
        ctx.reply('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!');
        for (const user of users) {
            yield ctx.copyMessage(user);
        }
        ctx.reply('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    }
    else
        next();
}));
bot.command('ban', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    if (!config_1.ADMIN_IDS.includes(ctx.from.id)) {
        return;
    }
    const id = ctx.message.text.replace('/ban', '').trim();
    if (!id) {
        ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n/ban [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]');
        return;
    }
    yield fs.appendFile(banFilePath, id + IDS_SEPARATOR);
    yield ctx.reply(`${id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫`);
}));
bot.command('unban', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    if (!config_1.ADMIN_IDS.includes(ctx.from.id)) {
        return;
    }
    const id = ctx.message.text.replace('/unban', '').trim();
    if (!id) {
        ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n/unban [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]');
        return;
    }
    const text = yield fs.readFile(banFilePath, { encoding: 'utf8' });
    const ids = text.split(IDS_SEPARATOR);
    const res = ids.filter(val => val !== id);
    fs.writeFile(banFilePath, res.join(IDS_SEPARATOR));
    yield ctx.reply(`${id} —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞`);
}));
bot.command('_spam', ctx => {
    global[ctx.from.id].lock_position = 'get-spam';
    ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å–ª—ã–∫–∏!');
});
bot.on('message:text', (ctx, next) => {
    var _a, _b;
    const amount = Number(ctx.msg.text);
    if (((_a = global[ctx.from.id]) === null || _a === void 0 ? void 0 : _a.lock_position) === 'get-amount' && !!amount) {
        if (amount < config_1.MINIMUM_AMOUNT) {
            ctx.reply(``);
            return;
        }
        global[ctx.from.id].price = amount;
        global[ctx.from.id].orderNumber = (0, logic_1.getOrderNumber)();
        (_b = global[ctx.from.id]) === null || _b === void 0 ? void 0 : _b.lock_position = '';
        ctx.reply('–í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 0 —Ä—É–±..\n–ß–µ–º –±—É–¥–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å?', {
            reply_markup: keyboards_1.topUpMethods
        });
    }
    else
        next();
});
bot.callbackQuery('last-order', ctx => bot.api.answerCallbackQuery(ctx.callbackQuery.id, {
    text: '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!',
    show_alert: true
}));
bot.on('callback_query', (ctx, next) => {
    ctx.answerCallbackQuery();
    next();
});
bot.callbackQuery(/itm*/, ctx => {
    var _a;
    const id = ctx.callbackQuery.data.slice(4);
    //city, itemName
    ctx.reply('–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, –≤—ã–±–∏—Ä–∞–π —Ä–∞–π–æ–Ω –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞, —É–≤–∏–¥–∏–º—Å—è )))\n\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –∏ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—Å–∞—Ç—å:\n<a href="https://t.me/be_alphabe">üí∏@smoki_mo2üí∏</a>', { parse_mode: "HTML", reply_markup: (0, keyboards_1.regionsBuilder)((_a = global[ctx.from.id]) === null || _a === void 0 ? void 0 : _a.city, id) });
});
bot.callbackQuery(/order*/, (ctx) => {
    const data = ctx.callbackQuery.data;
    const id = data.split('|')[1];
    console.log(id);
    let name;
    let price;
    console.log(config_1.items);
    for (const city of Object.keys(config_1.items)) {
        console.log(city, 'djkdfghgklh');
        for (const regionName of Object.keys(config_1.items[city])) {
            const region = config_1.items[city][regionName];
            for (const item of region) {
                if (item.id === id) {
                    name = item.title;
                    price = item.price;
                }
            }
        }
    }
    console.log(name, price);
    global[ctx.from.id].buyName = name;
    global[ctx.from.id].price = Number(price);
    global[ctx.from.id].orderNumber = (0, logic_1.getOrderNumber)();
    ctx.reply(`–ù–æ–º–µ—Ä –ø–æ–∫—É–ø–∫–∏ ‚Ññ ${global[ctx.from.id].orderNumber}
–¢–æ–≤–∞—Ä –∏ –æ–±—ä–µ–º <b>${name}</b>
–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –û–ü–õ–ê–¢–ò–¢–¨
–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –í—ã –Ω–∞–∂–º–µ—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã, —É –≤–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É`, {
        parse_mode: "HTML",
        reply_markup: keyboards_1.payOrCancel
    });
});
bot.callbackQuery('chose_pay_method', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    yield ctx.reply('–í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 0 —Ä—É–±..\n–ß–µ–º –±—É–¥–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å?', { reply_markup: keyboards_1.topUpMethods });
}));
bot.callbackQuery('balance', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const userID = ctx.from.id;
    yield ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å`);
    global[ctx.from.id].lock_position = 'get-amount';
}));
bot.callbackQuery(/pay$|btc$/, (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    if (global[ctx.from.id].activeOrder) {
        return ctx.reply('–£ –≤–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ–ø–ª–∞—Ç–∏—Ç–µ –∏–ª–∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–º–µ–Ω—ã!!!');
    }
    yield ctx.reply(`‚úÖ –í–´–î–ê–ù–ù–´–ï –†–ï–ö–í–ò–ó–ò–¢–´ –î–ï–ô–°–¢–í–£–Æ–¢ 30 –ú–ò–ù–£–¢
‚úÖ –í–´ –ü–û–¢–ï–†–Ø–ï–¢–ï –î–ï–ù–¨–ì–ò, –ï–°–õ–ò –û–ü–õ–ê–¢–ò–¢–ï –ü–û–ó–ñ–ï
‚úÖ –ü–ï–†–ï–í–û–î–ò–¢–ï –¢–û–ß–ù–£–Æ –°–£–ú–ú–£. –ù–ï–í–ï–†–ù–ê–Ø –°–£–ú–ú–ê –ù–ï –ë–£–î–ï–¢ –ó–ê–ß–ò–°–õ–ï–ù–ê.
‚úÖ –û–ü–õ–ê–¢–ê –î–û–õ–ñ–ù–ê –ü–†–û–•–û–î–ò–¢–¨ –û–î–ù–ò–ú –ü–õ–ê–¢–ï–ñ–û–ú.
‚úÖ –ü–†–û–ë–õ–ï–ú–´ –° –û–ü–õ–ê–¢–û–ô? –ü–ï–†–ï–ô–î–ò–¢–ï –ü–û –°–°–´–õ–ö–ï : <a href="https://t.me/xm_doctor">doctor</a>
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –∏
ID:  ${ctx.from.id}
‚úÖ –° –ü–†–û–ë–õ–ï–ú–ù–û–ô –ó–ê–Ø–í–ö–û–ô –û–ë–†–ê–©–ê–ô–¢–ï–°–¨ –ù–ï –ü–û–ó–î–ù–ï–ï 24 –ß–ê–°–û–í –° –ú–û–ú–ï–ù–¢–ê –û–ü–õ–ê–¢–´.`, { parse_mode: "HTML" });
    const isBtc = ctx.callbackQuery.data === 'btc';
    const wallets = isBtc ? config_1.BTC_WALLETS : config_1.CARD_NUMBERS;
    let cardNumberOrBtcWallet;
    if (config_1.RANDOM_CARD_CHOICE) {
        cardNumberOrBtcWallet = wallets[Math.floor(Math.random() * wallets.length)];
    }
    else {
        if (cardIndex === wallets.length)
            cardIndex = 0;
        cardNumberOrBtcWallet = wallets[cardIndex++];
    }
    let price = Math.round(global[ctx.from.id].price * (1 + config_1.PLUS_PERCENT / 100) + Math.floor(Math.random() * config_1.PRICE_PLUS_RANGE));
    if (isBtc) {
        price = yield new Promise((resolve, reject) => {
            https.get(`https://www.blockchain.com/tobtc?currency=RUB&value=${price}`, (res) => {
                let data = '';
                res.on('data', (chunk) => data += chunk);
                res.on('end', () => resolve(data));
                res.on('error', reject);
            });
        });
    }
    yield ctx.reply(`‚úÖ–ó–∞—è–≤–∫–∞ ‚Ññ <b>${global[ctx.from.id].orderNumber}</b>
     –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ ${isBtc ? '–∫–æ—à–µ–ª—ë–∫' : '–±–∞–Ω–∫–æ–≤—Å–∫—É—é  –∫–∞—Ä—Ç—É'} ${price} ${isBtc ? 'BTC' : '—Ä—É–±–ª–µ–π —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º'}.  –í–∞–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–æ–≤–Ω—É—é —Å—É–º–º—É.
<b>${cardNumberOrBtcWallet}</b>
‚ÄºÔ∏è —É –≤–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω –Ω–∞ –æ–ø–ª–∞—Ç—É, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–ª–∞—Ç—ë–∂ –Ω–µ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω
‚ÄºÔ∏è –ø–µ—Ä–µ–≤—ë–ª –Ω–µ—Ç–æ—á–Ω—É—é —Å—É–º–º—É - –æ–ø–ª–∞—Ç–∏–ª —á—É–∂–æ–π –∑–∞–∫–∞–∑`, { parse_mode: "HTML" });
    yield ctx.reply('–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –≤—ã–¥–∞–ª–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - "–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π"', { reply_markup: keyboards_1.problemWithPayment });
    global[ctx.from.id].activeOrder = true;
    setTimeout(() => {
        global[ctx.from.id].activeOrder = false;
        ctx.reply(`–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ${global[ctx.from.id].orderNumber} –æ—Ç–º–µ–Ω–µ–Ω–∞`);
    }, config_1.ORDER_CANCEL_DELAY * 1000);
    const textToAdmin = `–ó–∞—è–≤–∫–∞ ‚Ññ <b>${global[ctx.from.id].orderNumber}</b>
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id: <a href="tg://user?id=${ctx.from.id}">${ctx.from.id}</a>${ctx.from.username ? ` @${ctx.from.username}` : ''}
–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: *${cardNumberOrBtcWallet.slice(-4)} 
–°—É–º–º–∞: ${price} ${isBtc ? 'btc' : '—Ä—É–±.'}`;
    yield (0, logic_1.sendMessagesToManyUsers)(ctx, config_1.ADMIN_IDS, textToAdmin, { parse_mode: "HTML" });
}));
bot.callbackQuery('my-bots', ctx => {
    ctx.reply('–í–∞—à–∏ –±–æ—Ç—ã:\n' +
        '–£ –≤–∞—Å –Ω–µ—Ç—É –±–æ—Ç–æ–≤!', {
        reply_markup: keyboards_1.addBot
    });
});
bot.callbackQuery('referral-bots', ctx => {
    ctx.reply('–î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –±–æ—Ç–∞–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 200—Ä—É–±. —Å –∫–∞–∂–¥–æ–≥–æ –µ–≥–æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.\n' +
        '–í–∞—à–∏ –±–æ—Ç—ã:\n' +
        '–£ –≤–∞—Å –Ω–µ—Ç—É –±–æ—Ç–æ–≤!', {
        reply_markup: keyboards_1.addBot
    });
});
bot.callbackQuery('add-bot', ctx => {
    ctx.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –æ—Ç 10-—Ç–∏ –ø–æ–∫—É–ø–æ–∫');
});
bot.callbackQuery((0, logic_1.getCities)(), ctx => {
    const data = ctx.callbackQuery.data;
    global[ctx.from.id].city = data;
    if (!(0, keyboards_1.itemsBuilder)(data)) {
        return ctx.reply('–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ');
    }
    ctx.reply('–û—Ç–ª–∏—á–Ω–æ, —Ç–∞–º —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤—Å–µ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ, —á—Ç–æ –∂–µ–ª–∞–µ—à—å ?)\n\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –∏ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—Å–∞—Ç—å:\n<a href="https://t.me/be_alphabe">üí∏@smoki_mo2üí∏</a>', { parse_mode: "HTML", reply_markup: (0, keyboards_1.itemsBuilder)(data) });
});
const database = {}; // –û–±—ä—è–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–∞–ª–∞–Ω—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
function addBalanceWithNotification(chatId, amount) {
    let balance = database[chatId]; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!balance) { // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 0
        database[chatId] = 0;
        balance = 0;
    }
    database[chatId] += amount; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É
    const message = `–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount} —Ä. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${database[chatId]} —Ä.`;
    bot.telegram.sendMessage(chatId, message); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/add_balance"
bot.command('add_balance', (ctx) => {
    const chatId = ctx.chat.id; // –ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const amount = 100; // –£–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    addBalanceWithNotification(chatId, amount); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
});
bot.on('message:text', ctx => {
    ctx.reply('–ë—Ä–æ –≥–¥–µ –±—É–¥–µ—à—å –±—Ä–∞—Ç—å ?)\n\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –∏ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—Å–∞—Ç—å:\n<a href="https://t.me/be_alphabe">üí∏@smoki_mo2üí∏</a>', { parse_mode: "HTML",
        reply_markup: (0, keyboards_1.mainCitiesBuilder)()
    });
});
bot.start();
process.on('uncaughtException', console.error);
process.on('unhandledRejection', console.error);
